// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `interface.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include "../include/interface.h"
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __biblAudio__ServeurIce__afficherMorceaux_name = "afficherMorceaux";

const ::std::string __biblAudio__ServeurIce__bRechercherMorceau_name = "bRechercherMorceau";

const ::std::string __biblAudio__ServeurIce__bAjoutMorceau_name = "bAjoutMorceau";

const ::std::string __biblAudio__ServeurIce__bSuprMorceau_name = "bSuprMorceau";

const ::std::string __biblAudio__ServeurIce__getMorceaux_name = "getMorceaux";

}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::biblAudio::upCast(::IceProxy::biblAudio::ServeurIce* p) { return p; }

void
::IceProxy::biblAudio::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::biblAudio::ServeurIce>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::biblAudio::ServeurIce;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::biblAudio::ServeurIce::afficherMorceaux(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __biblAudio__ServeurIce__afficherMorceaux_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::biblAudio::ServeurIce* __del = dynamic_cast< ::IceDelegate::biblAudio::ServeurIce*>(__delBase.get());
            __del->afficherMorceaux(__ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::biblAudio::ServeurIce::begin_afficherMorceaux(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __biblAudio__ServeurIce__afficherMorceaux_name, __del, __cookie);
    try
    {
        __result->__prepare(__biblAudio__ServeurIce__afficherMorceaux_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::biblAudio::ServeurIce::end_afficherMorceaux(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __biblAudio__ServeurIce__afficherMorceaux_name);
}

::biblAudio::Morceau
IceProxy::biblAudio::ServeurIce::bRechercherMorceau(const ::std::string& sNomMusique, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __biblAudio__ServeurIce__bRechercherMorceau_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__biblAudio__ServeurIce__bRechercherMorceau_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::biblAudio::ServeurIce* __del = dynamic_cast< ::IceDelegate::biblAudio::ServeurIce*>(__delBase.get());
            return __del->bRechercherMorceau(sNomMusique, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::biblAudio::ServeurIce::begin_bRechercherMorceau(const ::std::string& sNomMusique, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__biblAudio__ServeurIce__bRechercherMorceau_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __biblAudio__ServeurIce__bRechercherMorceau_name, __del, __cookie);
    try
    {
        __result->__prepare(__biblAudio__ServeurIce__bRechercherMorceau_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(sNomMusique);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::biblAudio::Morceau
IceProxy::biblAudio::ServeurIce::end_bRechercherMorceau(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __biblAudio__ServeurIce__bRechercherMorceau_name);
    ::biblAudio::Morceau __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::biblAudio::ServeurIce::bAjoutMorceau(const ::std::string& sNomArt, const ::std::string& sNomMorc, const ::std::string& sFic, ::Ice::Int uiDureeMorc, ::Ice::Int uiDateSortie, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __biblAudio__ServeurIce__bAjoutMorceau_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__biblAudio__ServeurIce__bAjoutMorceau_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::biblAudio::ServeurIce* __del = dynamic_cast< ::IceDelegate::biblAudio::ServeurIce*>(__delBase.get());
            return __del->bAjoutMorceau(sNomArt, sNomMorc, sFic, uiDureeMorc, uiDateSortie, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::biblAudio::ServeurIce::begin_bAjoutMorceau(const ::std::string& sNomArt, const ::std::string& sNomMorc, const ::std::string& sFic, ::Ice::Int uiDureeMorc, ::Ice::Int uiDateSortie, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__biblAudio__ServeurIce__bAjoutMorceau_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __biblAudio__ServeurIce__bAjoutMorceau_name, __del, __cookie);
    try
    {
        __result->__prepare(__biblAudio__ServeurIce__bAjoutMorceau_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(sNomArt);
        __os->write(sNomMorc);
        __os->write(sFic);
        __os->write(uiDureeMorc);
        __os->write(uiDateSortie);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::biblAudio::ServeurIce::end_bAjoutMorceau(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __biblAudio__ServeurIce__bAjoutMorceau_name);
    bool __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::biblAudio::ServeurIce::bSuprMorceau(const ::std::string& sNomMorc, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __biblAudio__ServeurIce__bSuprMorceau_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__biblAudio__ServeurIce__bSuprMorceau_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::biblAudio::ServeurIce* __del = dynamic_cast< ::IceDelegate::biblAudio::ServeurIce*>(__delBase.get());
            return __del->bSuprMorceau(sNomMorc, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::biblAudio::ServeurIce::begin_bSuprMorceau(const ::std::string& sNomMorc, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__biblAudio__ServeurIce__bSuprMorceau_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __biblAudio__ServeurIce__bSuprMorceau_name, __del, __cookie);
    try
    {
        __result->__prepare(__biblAudio__ServeurIce__bSuprMorceau_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(sNomMorc);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::biblAudio::ServeurIce::end_bSuprMorceau(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __biblAudio__ServeurIce__bSuprMorceau_name);
    bool __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::biblAudio::mvectRecherche
IceProxy::biblAudio::ServeurIce::getMorceaux(const ::std::string& sNomArt, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __biblAudio__ServeurIce__getMorceaux_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__biblAudio__ServeurIce__getMorceaux_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::biblAudio::ServeurIce* __del = dynamic_cast< ::IceDelegate::biblAudio::ServeurIce*>(__delBase.get());
            return __del->getMorceaux(sNomArt, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::biblAudio::ServeurIce::begin_getMorceaux(const ::std::string& sNomArt, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__biblAudio__ServeurIce__getMorceaux_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __biblAudio__ServeurIce__getMorceaux_name, __del, __cookie);
    try
    {
        __result->__prepare(__biblAudio__ServeurIce__getMorceaux_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(sNomArt);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::biblAudio::mvectRecherche
IceProxy::biblAudio::ServeurIce::end_getMorceaux(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __biblAudio__ServeurIce__getMorceaux_name);
    ::biblAudio::mvectRecherche __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::biblAudio::ServeurIce::ice_staticId()
{
    return ::biblAudio::ServeurIce::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::biblAudio::ServeurIce::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::biblAudio::ServeurIce);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::biblAudio::ServeurIce::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::biblAudio::ServeurIce);
}

::IceProxy::Ice::Object*
IceProxy::biblAudio::ServeurIce::__newInstance() const
{
    return new ServeurIce;
}

void
IceDelegateM::biblAudio::ServeurIce::afficherMorceaux(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __biblAudio__ServeurIce__afficherMorceaux_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

::biblAudio::Morceau
IceDelegateM::biblAudio::ServeurIce::bRechercherMorceau(const ::std::string& sNomMusique, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __biblAudio__ServeurIce__bRechercherMorceau_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(sNomMusique);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::biblAudio::Morceau __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

bool
IceDelegateM::biblAudio::ServeurIce::bAjoutMorceau(const ::std::string& sNomArt, const ::std::string& sNomMorc, const ::std::string& sFic, ::Ice::Int uiDureeMorc, ::Ice::Int uiDateSortie, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __biblAudio__ServeurIce__bAjoutMorceau_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(sNomArt);
        __os->write(sNomMorc);
        __os->write(sFic);
        __os->write(uiDureeMorc);
        __os->write(uiDateSortie);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

bool
IceDelegateM::biblAudio::ServeurIce::bSuprMorceau(const ::std::string& sNomMorc, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __biblAudio__ServeurIce__bSuprMorceau_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(sNomMorc);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::biblAudio::mvectRecherche
IceDelegateM::biblAudio::ServeurIce::getMorceaux(const ::std::string& sNomArt, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __biblAudio__ServeurIce__getMorceaux_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(sNomArt);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::biblAudio::mvectRecherche __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateD::biblAudio::ServeurIce::afficherMorceaux(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::biblAudio::ServeurIce* servant = dynamic_cast< ::biblAudio::ServeurIce*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->afficherMorceaux(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __biblAudio__ServeurIce__afficherMorceaux_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(__current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::biblAudio::Morceau
IceDelegateD::biblAudio::ServeurIce::bRechercherMorceau(const ::std::string& sNomMusique, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::biblAudio::Morceau& __result, const ::std::string& __p_sNomMusique, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_sNomMusique(__p_sNomMusique)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::biblAudio::ServeurIce* servant = dynamic_cast< ::biblAudio::ServeurIce*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->bRechercherMorceau(_m_sNomMusique, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::biblAudio::Morceau& _result;
        const ::std::string& _m_sNomMusique;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __biblAudio__ServeurIce__bRechercherMorceau_name, ::Ice::Normal, __context);
    ::biblAudio::Morceau __result;
    try
    {
        _DirectI __direct(__result, sNomMusique, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

bool
IceDelegateD::biblAudio::ServeurIce::bAjoutMorceau(const ::std::string& sNomArt, const ::std::string& sNomMorc, const ::std::string& sFic, ::Ice::Int uiDureeMorc, ::Ice::Int uiDateSortie, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, const ::std::string& __p_sNomArt, const ::std::string& __p_sNomMorc, const ::std::string& __p_sFic, ::Ice::Int __p_uiDureeMorc, ::Ice::Int __p_uiDateSortie, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_sNomArt(__p_sNomArt),
            _m_sNomMorc(__p_sNomMorc),
            _m_sFic(__p_sFic),
            _m_uiDureeMorc(__p_uiDureeMorc),
            _m_uiDateSortie(__p_uiDateSortie)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::biblAudio::ServeurIce* servant = dynamic_cast< ::biblAudio::ServeurIce*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->bAjoutMorceau(_m_sNomArt, _m_sNomMorc, _m_sFic, _m_uiDureeMorc, _m_uiDateSortie, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        bool& _result;
        const ::std::string& _m_sNomArt;
        const ::std::string& _m_sNomMorc;
        const ::std::string& _m_sFic;
        ::Ice::Int _m_uiDureeMorc;
        ::Ice::Int _m_uiDateSortie;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __biblAudio__ServeurIce__bAjoutMorceau_name, ::Ice::Normal, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, sNomArt, sNomMorc, sFic, uiDureeMorc, uiDateSortie, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

bool
IceDelegateD::biblAudio::ServeurIce::bSuprMorceau(const ::std::string& sNomMorc, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, const ::std::string& __p_sNomMorc, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_sNomMorc(__p_sNomMorc)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::biblAudio::ServeurIce* servant = dynamic_cast< ::biblAudio::ServeurIce*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->bSuprMorceau(_m_sNomMorc, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        bool& _result;
        const ::std::string& _m_sNomMorc;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __biblAudio__ServeurIce__bSuprMorceau_name, ::Ice::Normal, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, sNomMorc, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::biblAudio::mvectRecherche
IceDelegateD::biblAudio::ServeurIce::getMorceaux(const ::std::string& sNomArt, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::biblAudio::mvectRecherche& __result, const ::std::string& __p_sNomArt, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_sNomArt(__p_sNomArt)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::biblAudio::ServeurIce* servant = dynamic_cast< ::biblAudio::ServeurIce*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getMorceaux(_m_sNomArt, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::biblAudio::mvectRecherche& _result;
        const ::std::string& _m_sNomArt;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __biblAudio__ServeurIce__getMorceaux_name, ::Ice::Normal, __context);
    ::biblAudio::mvectRecherche __result;
    try
    {
        _DirectI __direct(__result, sNomArt, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Object* biblAudio::upCast(::biblAudio::ServeurIce* p) { return p; }

namespace
{
const ::std::string __biblAudio__ServeurIce_ids[2] =
{
    "::Ice::Object",
    "::biblAudio::ServeurIce"
};

}

bool
biblAudio::ServeurIce::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__biblAudio__ServeurIce_ids, __biblAudio__ServeurIce_ids + 2, _s);
}

::std::vector< ::std::string>
biblAudio::ServeurIce::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__biblAudio__ServeurIce_ids[0], &__biblAudio__ServeurIce_ids[2]);
}

const ::std::string&
biblAudio::ServeurIce::ice_id(const ::Ice::Current&) const
{
    return __biblAudio__ServeurIce_ids[1];
}

const ::std::string&
biblAudio::ServeurIce::ice_staticId()
{
    return __biblAudio__ServeurIce_ids[1];
}

::Ice::DispatchStatus
biblAudio::ServeurIce::___afficherMorceaux(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    afficherMorceaux(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
biblAudio::ServeurIce::___bRechercherMorceau(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string sNomMusique;
    __is->read(sNomMusique);
    __inS.endReadParams();
    ::biblAudio::Morceau __ret = bRechercherMorceau(sNomMusique, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
biblAudio::ServeurIce::___bAjoutMorceau(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string sNomArt;
    ::std::string sNomMorc;
    ::std::string sFic;
    ::Ice::Int uiDureeMorc;
    ::Ice::Int uiDateSortie;
    __is->read(sNomArt);
    __is->read(sNomMorc);
    __is->read(sFic);
    __is->read(uiDureeMorc);
    __is->read(uiDateSortie);
    __inS.endReadParams();
    bool __ret = bAjoutMorceau(sNomArt, sNomMorc, sFic, uiDureeMorc, uiDateSortie, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
biblAudio::ServeurIce::___bSuprMorceau(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string sNomMorc;
    __is->read(sNomMorc);
    __inS.endReadParams();
    bool __ret = bSuprMorceau(sNomMorc, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
biblAudio::ServeurIce::___getMorceaux(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string sNomArt;
    __is->read(sNomArt);
    __inS.endReadParams();
    ::biblAudio::mvectRecherche __ret = getMorceaux(sNomArt, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __biblAudio__ServeurIce_all[] =
{
    "afficherMorceaux",
    "bAjoutMorceau",
    "bRechercherMorceau",
    "bSuprMorceau",
    "getMorceaux",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
biblAudio::ServeurIce::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__biblAudio__ServeurIce_all, __biblAudio__ServeurIce_all + 9, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __biblAudio__ServeurIce_all)
    {
        case 0:
        {
            return ___afficherMorceaux(in, current);
        }
        case 1:
        {
            return ___bAjoutMorceau(in, current);
        }
        case 2:
        {
            return ___bRechercherMorceau(in, current);
        }
        case 3:
        {
            return ___bSuprMorceau(in, current);
        }
        case 4:
        {
            return ___getMorceaux(in, current);
        }
        case 5:
        {
            return ___ice_id(in, current);
        }
        case 6:
        {
            return ___ice_ids(in, current);
        }
        case 7:
        {
            return ___ice_isA(in, current);
        }
        case 8:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
biblAudio::ServeurIce::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
biblAudio::ServeurIce::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
biblAudio::__patch(ServeurIcePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::biblAudio::ServeurIcePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::biblAudio::ServeurIce::ice_staticId(), v);
    }
}
